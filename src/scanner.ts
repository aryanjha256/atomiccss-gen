import fs from "fs";
import path from "path";
import { generateCssForClass } from "./generator.js";
import chokidar from "chokidar";

interface ScanOptions {
  srcDir: string;
  outFile: string;
  watch?: boolean;
}

// Regex to find atomic CSS class names
const CLASS_REGEX = /\b([a-zA-Z0-9]+(-\[[^\]]+\]))\b/g;

function extractClassesFromFile(filePath: string): Set<string> {
  const content = fs.readFileSync(filePath, "utf-8");
  const matches = content.match(CLASS_REGEX) || [];
  return new Set(matches);
}

function scanDirectory(dir: string): Set<string> {
  const classes = new Set<string>();

  const files = fs.readdirSync(dir, { recursive: true }) as string[];

  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isFile() && /\.(jsx?|tsx?|html|vue|svelte)$/.test(filePath)) {
      const fileClasses = extractClassesFromFile(filePath);
      fileClasses.forEach((cls) => classes.add(cls));
    }
  }

  return classes;
}

function generateCss(classes: Set<string>): string {
  let css = "/* Generated by atomiccss-gen */\n\n";

  for (const cls of classes) {
    const generatedCss = generateCssForClass(cls);
    if (generatedCss) {
      css += generatedCss + "\n";
    }
  }

  return css;
}

export async function scanAndGenerate(options: ScanOptions): Promise<void> {
  const { srcDir, outFile, watch } = options;

  console.log(`Scanning ${srcDir} for atomic classes...`);

  const generateAndSave = () => {
    try {
      const classes = scanDirectory(srcDir);
      const css = generateCss(classes);

      fs.writeFileSync(outFile, css, "utf-8");
      console.log(
        `Generated CSS saved to ${outFile} (${classes.size} classes)`
      );
    } catch (error) {
      console.error("Error generating CSS:", error);
    }
  };

  // Generate initial CSS
  generateAndSave();

  // Watch for changes if enabled
  if (watch) {
    console.log(`Watching ${srcDir} for changes...`);

    const watcher = chokidar.watch(
      [
        path.join(srcDir, "**/*.js"),
        path.join(srcDir, "**/*.jsx"),
        path.join(srcDir, "**/*.ts"),
        path.join(srcDir, "**/*.tsx"),
        path.join(srcDir, "**/*.html"),
        path.join(srcDir, "**/*.vue"),
        path.join(srcDir, "**/*.svelte"),
      ],
      {
        persistent: true,
        ignoreInitial: true,
      }
    );

    watcher.on("all", (event: string, filePath: string) => {
      console.log(`File ${filePath} changed (${event})`);
      generateAndSave();
    });
  }
}
